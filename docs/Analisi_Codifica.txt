Variabili globali utilizzate.

Sia per l'ASM che per il DSM le variabili globali utilizzate sono principalmente tre:
-VM: di tipo VirtualMachine, contiene i dati della macchina virtuale simulata. In questa versione del programma viene utilizzata solo la memoria simulata.
-OpcLst: matrice, che nella versione originaria dell'ASM conteneva i dati di ogni istruzione dello Z80, modificata per contenere come suoi elementi gli indici delle corrispondenti istruzioni nel vettore del DSM.
-IsrVet: vettore del DSM (utilizzato indirettamente anche dall'ASM) che contiene i dati di ogni istruzione Z80.

Codifica.

Come per tutti gli algoritmi è la fase di analisi a creare i maggiori problemi, è chiaro comunque che molti problemi sfuggono nella fase di analisi e si mostrino in tutta la loro complessità solo troppo tardi: quando da un pezzo si è smesso di utilizzare carta e penna per l'analisi e si è pessati alla tastiera per la programmazione.
Nonostante l'accurata analisi del problema, gli stessi problemi sono sorti in fase di codifica di questo programma.

Volendo schematizzare la programmazione dell'assemblatore, allora si può immaginare questa come divisa in cinque fasi:
-Programmazione delle routines di supporto di primo livello.
-Programmazione delle routines di supporto di secondo livello.
-Programmazione del  Loop principale.

Descriveremo ora di seguito le singole routine che compongono l'assemblatore e successivamente quelle che compongono il disassemblatore.
Per ognuna di esse descriveremo la funzione che svolge nonché l'input e l'output.
Note:
-La memoria di compilazione non è altro che la memoria della macchina virtuale in cui andrà memorizzato il codice oggetto.
-Le routines che interagiscono direttamente con la memoria di compilazione hanno tutte come argomento MemInd, esso è passato per riferimento ed indica l'indirizzo attualmente elaborato.

Organigramma Assemblatore

Di seguito è mostrato un organigramma dell'assemblatore. Tale grafico permette una più rapida comprensione della struttura del programma.

 Main  --> LoopASM  --> BTOH
                    --> StrCpt
                    --> ScindeStr    --> ATOW
                                     --> Aggiusta (funzione di supporto)
                    --> Controllo_Sintassi
                    --> RicercaOpc
                    --> Assemblaggio --> HandleDirective --> DB
                                                         --> DW

Routines di supporto di primo livello.

Le routines di supporto di primo livello sono tutte quelle routines che non svolgono ruoli di primo piano ma svolgono semplici e veloci operazioni di utilità. Esse vengono chiamate direttamente o indirettamente dal loop principale, e direttamente dalle routines di supporto di secondo livello.
In questa categoria ricadono operazioni di:

-conversione di formato.
-elaborazione di stringhe.

Per queste routines forniremo soltanto una stringata spiegazione, avendo esse una semplice struttura.

ATOW
Descrizione: Converte una stringa ascii rappresentante un numero nell'equivalente intero espresso in formato word.
tipo: procedura.
INPUT:
      strsor: stringa sorgente.
OUTPUT:
      ew: equivalente intero della stringa d'input.
Altre variabili:
      errore: eventuale errore di conversione.


SCINDESTR.
Descrizione: Scinde una stringa sorgente ottimizzata in stringa statica e stringa dinamica. Ogni carattere della stringa dinamica è situato di seguito all'altro. L'inizio della stringa dinamica è determinato dal primo carattere numerico della stringa.
tipo: funzione.
INPUT:
      STRSOR: stringa sorgente ottimizzata.
      STRVER: variabile in cui memorizzare la stringa statica, passato per
              riferimento.
      DIN: variabile in cui memorizzare la stringa dinamica convertita in
           intero word, passato per riferimento
OUTPUT:
      i parametri STRVER, DIN opportunamente riempiti.
Altre variabili:
      i, j, k, indice: contatori.
      strnum: stringa dinamica.
      parola: variabile di comodo.

AGGIUSTA
Descrizione: converte i caratteri della stringa sorgente da minuscoli a maiuscoli.
tipo: procedura.
INPUT: 
     STRSOR: stringa sorgente da convertire, passata per riferimento.
OUTPUT:
     STRSOR: stringa convertita.
Altre variabili:
     ASCII: valore ASCII del carattere esaminato.
     I: contatore.

STRCPT
Descrizione: Compatta una stringa sorgente. Elimina tutti gli spazi, i commenti e trasforma (tramite la routine AGGIUSTA) tutti i caratteri minuscoli in maiuscoli.
tipo: funzione.
INPUT:
      STRSOR: stringa sorgente da compattare.
OUTPUT:
      stringa compattata.
Altre variabili:
      st: stringa comodo.
      lung: lunghezza della stringa.
      i: contatore.

BTOH.
Descrizione: converte un intero in formato byte nell'equivalente stringa numerica espressa in base 16.
Tipo: funzione.
INPUT:
     DEC: decimale da convertire.
OUTPUT:
     stringa numerica esadecimale del byte d'INPUT.
Altre variabili:
     HD: Stringa contenente le cifre esadecimali.
     stringa: equivalente stringa del byte d'INPUT.

Routines di supporto di secondo livello.

Queste routines anche se svolgono funzione di supporto, queste non sono semplici compiti di utilità ma compiti ben precisi e complessi.
Sono ritenuti ruotines di supporto nell'ottica della programmazione black boxes. E vengono tutte chiamate direttamente dal loop principale dell'assemblatore.

Controllo_Sintassi.
Descrizione: Effettua un controllo sintattico su una riga del codice sorgente per detezionare eventuali errori.
Tipo: funzione.
Input: 
       line: linea di codice sorgente su cui effettuare il controllo.
OUTPUT:
       variabile booleana che indica con TRUE che la linea di codice contiene
       errori e con FALSE la condizione opposta.
Altre variabili:
       c, i: contatori.
       lun: lunghezza della linea di codice.
       alfa: array contenente l'alfabeto dello Z80.
       len: lunghezza dell'alfabeto dello Z80.
       err: variabile booleana che indica con TRUE la presenza di un errore.
       --Le seguenti variabili sono tutte di tipo BOOLEAN e vengono usati --
       --come flags per memorizzare lo stato della routine                --
       pa:      è stata trovata una parentesi aperta.
       pc:      è stata trovata una parentesi chiusa.
       piu:     è stata trovata un segno più.
       virgola: è stata trovata una virgola.
       apice:   è stato trovato un apice. 

Analisi.
La prima operazione è quella di resettare le variabili pa, pc, piu, virgola, apice in modo da resettare lo stato della routine. Si calcolano la lunghezza della linea di codice (lun) e quella dell'alfabeto Z80 (len). Successivamente inizia il procedimento di controllo. Esso è diviso in due fasi:
-Controllo se i caratteri che compongono la linea di codice facciano parte dell'alfabeto.
-Verifica se le regole (viste precedentemente) sulle istruzione dello Z80, siano rispettate.

La seconda face non è altro che un ciclo, che contiene un considerevole numero di costrutti if.. then che controllano se un determinato carattare è di un certo tipo, e in caso affermativo si verifica se questo carattere è «compatibile» con i caratteri che gli sono vicino o con lo stato attuale della routine.

RicercaOpc.
Descrizione: Ricerca all'interno del DB, tramite l'indice della matrice OpcLst, il record di un'istruzione dello Z80.
Tipo: funzione.
INPUT:
      OpcArr: riga della matrice cui utilizzare per effettuare la ricerca.
      Lun: lunghezza della riga della matrice.
      StrPat: stringa che rappresenta l'istruzione da cercare.
OUTPUT:
      Variabile intera che può assumere i seguenti valori:
          0: la stringa cercata non è presente nella riga del DB.
          1-lun: posizione dell'indice del record dell'istruzione
                 all'interno del DB.
Altre variabili:
      inizio: indice del primo elemento dell'array in cui effettuare la
              ricerca.
      fine:   indice dell'ultimo elemento dell'array in cui effettuare la
              ricerca.
      meta:   indice dell'elemento medio proporzionale tra INIZIO e FINE.
              E' l'elemento esaminato.
      res:    variabile booleana che indica con TRUE che l'elemento di indice
              META è quello cercato.
Analisi.
Il metodo di ricerca utilizzato è quello dicotonico, basato sul concetto della divisione successiva del vettore di ricerca in due parte, e sulla verifica che l'elemento centrale è quello cercato.
Alcune note sul vettore di ricerca. Come è noto il DB per l'assemblatore è una matrice, questo può essere considerato come un vettore di vettori, cioè ogni riga della matrice è un vettore. Quindi la ricerca verterà ogni volta solo su una riga del DB in modo da ottimizzare la ricerca. In effetti le istruzioni memorizzate in ogni riga non ha stesse caratteristiche, ma come è noto sono divise in funzione dei bytes di parte dinamica.

Assemblaggio
Descrizione: Esegui un'assemblaggio di basso livello, memorizzando in memoria di compilazione i bytes degli opcode e degli operandi.
Tipo: funzione.
INPUT:
     MemInd: indirizzo di memoria (virtuale dello Z80) in cui memorizzare
             l'istruzione.
     x: colonna dell'istruzione all'interno della matrice.
     y: riga della matrice in cui è memorizzata l'istruzione.
     Din: word contenente la parte dinamica dell'istruzione. Naturalmente se
          l'istruzione ha solo un byte di parte dinamica, oppure 0 bytes di
          parte dinamica, allora saranno significativi solo il byte meno
          significativo, oppure l'intero argomento non sarà significativo.
OUTPUT:
     TRUE:  se l'assemblaggio è stato effettuato correttamente.
     FALSE: se l'assemblaggio non è stato realizzato ad esempio per motivi di
            mancanza di spazio in memoria.
Altre variabili:
     i: contatore.
Analisi.
Questa routine è la primitiva di assemblaggio, interaggendo direttamente con la memoria di assemblaggio. Essa memorizza in memoria di assemblaggio i bytes di opcodes e gli eventuali bytes degli operandi di un'istruzione. I bytes d'opcode vengono prelevati dalla matrice. Infatti conoscendo la posizione all'interno della matrice del record dell'istruzione da assemblare si possono ricavare da quest'ultimo i bytes degli opcodes, inoltre si possono conoscere se sono presenti eventuali bytes di parte dinamica, e in che numero. Tali bytes vengono passati come argomento della funzione (DIN). Questo «pacchetto» di bytes viene trsferito nel giusto ordine in memoria a partire dall'indirizzo MemInd. Se si verificano casi d'errore (mancanza di spazio libero in memoria di assemblaggio) allora l'assemblaggio si blocca e viene segnalato l'evento alla routine chiamante restituendo il valore FALSE. Altrimenti se l'operazione ha avuto buon esito viene restituito il valore TRUE.

HandleDirective
Descrizione: Verifica se una linea di codice sorgente rappresenta una direttiva di compilazione, e in caso affermativo si occupa della sua gestione.
Tipo: funzione.
INPUT:
     strcom: stringa contenente una linea di codice sorgente compattata
             (senza spazi e contenente solo lettere maiuscole).
     MemInd: indirizzo della memoria di assemblaggio.
OUTPUT:
     TRUE la linea rappresenta una direttiva di assemblaggio, e la routine si
          occupa della sua gestione. L'assemblatore procederà
          nell'elaborazione della prossima linea di codice.
     FALSE la linea di codice non rappresenta una direttiva di assemblaggio,
           il compito di elaborarla spetta all'assemblatore.
Altre variabili:
     str: stringa contenente i primi bytes della linea che dovrebbero indicare
          la direttiva.
     len: lunghezza della linea di sorgente.
     errore: contiene un eventuale valore di errore della routine VAL.
     w: eventuale nuovo indirizzo di assemblaggio.
Analisi.
Le direttive di assemblaggio sono comandi (contenuti nel file sorgenti) per l'assemblatore. Informano l'assemblatore (tramite la routine HandleDirective) di gestire quella determinata linea di codice non come contenente istruzioni da compilare, ma comandi che modificano il funzionamente dell'assemblatore stesso oppure i valori contenuti della memoria di assemblaggio. Le direttive attualmente supportate sono:
-ORG nn
-DB n1, n2, n3, n4. n5, ...
-DW nn1, nn2, nn3, nn4, nn5, ...
La direttiva ORG specifica all'assemblatore un nuovo indirizzo di memoria in cui andranno memorizzate le istruzioni. Nel caso che la prima linea di codice contenga proprio questa direttiva, l'indirizzo specificato (nn) rappresenta l'indirizzo di partenza per la compilazione e prevale su quello specificato in modo interattivo dall'utente sulla linea comando. Questa routine risulta utile nel caso in cui il codice risulta frammentato in memoria, in modo da utilizzare un solo file sorgente al posto di molti files. Un altro vantaggio è che i dati sull'indirizzo di partenza viene «incapsulato» nel file sorgente, in modo statico evitando di doverlo riscrivere ogni volta.
La direttiva DB serve ad inserire in memoria K bytes. Questa direttiva risulta utile nel caso si voglia inserire in memoria un segmento dati, oppure delle variabili.
La direttiva DW è la duale di DB. Infatti i dati da inserire in memoria non sono bytes ma words.

La routine HandleDirective gestiste direttamente la direttiva ORG, mentre DB e DW vengono gestite dalle omonime routines.

DB
Descrizione: Gestisce la direttiva DB, per l'inserimento di n bytes in memoria di assemblaggio.
Tipo: procedura.
INPUT:
     MemInd: indirizzo di memoria in cui inserire gli n bytes.
     str: strimga contenente la direttiva.
OUTPUT:
      Memoria di compilazione modificata.
Analisi.
La direttiva DB ha la seguente sintassi:

DB n1, n2, n3, n4, ...

In cui n1, n2, n4, n4, ... sono i k bytes da inserire in memoria.

DW
Descrizione: Gestisce la direttiva DW, per l'inserimento di n words in memoria di assemblaggio.
Tipo: procedura.
INPUT:
     MemInd: indirizzo di memoria in cui inserire le n words.
     str: strimga contenente la direttiva.
OUTPUT:
      Memoria di compilazione modificata.
Analisi.
La direttiva DW ha la seguente sintassi:

DW nn1, nn2, nn3, nn4, ...

In cui nn1, nn2, nn4, nn4, ... sono le k words da inserire in memoria.


Loop principale dell'assemblaggio

LoopASM
Descrizione: Loop principale di assemblaggio.
Tipo: funzione.
INPUT:
     fp: file di testo contenente il programma sorgente in assembly Z80.
     MemInd: Indirizzo di memoria in cui memorizzare il codice LM Z80.
OUTPUT:
      -Numero di linee assemblate.
      -Memoria di compilazione modificata.
Altre variabili:
      line: linee assemblate.
      resasm: variabile BOOL che indica con TRUE il riuscito assemblaggio.
      ind: indice della riga all'interno della matrice contenente l'istruzione
           elaborata. E' il risultato della funzione RicercaOpc, ed assume
           valore zero nel caso in cui l'istruzione non è stata trovata.
      hex: stringa di comodo utilizzata per stampare i valori numerici in
           esadecimale.
      strsta: stringa contenente la parte statica dell'istruzione.
      strdin: stringa contenente la parte dinamica dell'istruzione.
      buffer: stringa che contiene una linea del file sorgente.
      i: contatore.
      strcom: stringa che contiene la linea sorgente compattata.
      din: word contenente l'eventuale parte dinamica di un'istruzione.
      w: word di comodo per il salvataggio temnporaneo di MemInd.
Analisi
Questa routine rappresenta il cuore dell'assemblatore effettuando il vero e proprio assemblaggio. Essa avendo in INPUT il file sorgente, effettua l'assemblaggio, generando in memoria di compilazione i bytes di LM.
La routine è il fulcro dell'assemblatore perché richiama direttamente o indirettamente tutte le routines fin qui esaminate.
Il programma non è altro che un assemblatore di linea, assemblando una linea di codice sorgente indipendentemente dall'altra. Quindi la routine è strutturata come un enorme ciclo che elabora di volta in volta una sola linea di codice. Il ciclo continua finché il file sorgente non è terminato, oppure non si sono verificati errori nell'assemblaggio, o finché un'istruzione trovata nel file sorgente non è presente nella matrice. Quando si verifica una sola di queste condizioni il ciclo termina.
La prima operazione è quella di leggere una linea dal file sorgente memorizzandola nel variabile BUFFER. Tale linea di codice sorgente viene compattata. Successivamente si effettua la ricerca all'interno della matrice dell'istruzione (tramite RicercaOpc). Dato che non sappiamo se questa istruzione ha o no parte dinamica la cerchiamo prima nella riga 0 della matrice che contiene tutte le istruzioni senza parte dinamica. Se l'esito è negativo allora significa che l'istruzione ha parte dinamica ed allora si scinde la parte dinamica dalla parte statica (tramite ScindeSTR). E si cerca la parte statica nella riga 1 (1-byte di parte dinamica) e poi nalla riga 2 (2-byte di parte dinamica). Se l'istruzione non è presente in nessuna delle tre righe allora il ciclo termina con un errore.
Altrimenti si procede alla conversione della parte dinamica da stringa in formato numerico e si passano i dati fin quì trovati alla routine Assemblaggio che effettua materialmente l'operazione di assemblaggio. Tramite infatti l'indirizzo della memoria di compilazione dove andrà memorizzata l'istruzione, la posizione all'interno della matrice dell'istruzione e della eventuale parte dinamica è possibile ricavare il codice LM dello Z80. Nel caso in cui l'assemblaggio ha avuto buon esito, allora si incrementa il numero di linee compilate (LINE), e si stampa su terminale l'indirizzo attuale di compilazione seguito dai bytes del codice LM (tutto espresso in esadecimale) ed infine il codice sorgente. Questo per dare all'utente modo di verificare l'andamento della compilazione.
Fatto ciò il ciclo riprende.

Codifica disassemblatore.

La codifica del disassemblatore è stata razionalizzata in modo da dividere le routines realizzate in tre categorie:

-Routines di supporto di primo livello.
-Routines di supporto di secondo livello.
-Loop principale del disassemblatore.

Come si vede una divisione molto simile a quella realizzata con l'assemblatore.
Organigramma Disassemblatore.

Come per l'assemblatore, anche per il disassemblatore è mostrato l'organigramma.

  Main --> LoopDSM --> WTOH            --> BTOH
                   --> RicercaIsr
                   --> Disassemblatore --> BTOH
                                       --> WTOH  --> BTOH

Routines di supporto di primo livello.

Le routine di supporto di primo livello sono identiche sia per l'assemblatore che per il disassemblatore.
C'è da notare comunque lo scarso utilizzo di routines di elaborazione delle stringhe per quanto riguarda il disassemblatore. Infatti tale tipo di routines non vengono utilizzate dal DSM. Le uniche routines utilizzate sono:

-btoh
-wtoh

Per giunta la routine btoh già è stata analizzate per l'assemblatore quindi non ci resta che analizzare wtoh.

WTOH.
Descrizione: Converte una word, in una stringa numerica equivalente in base esadecimale.
Tipo: Funzione.
INPUT:
     num: word da convertire.
OUTPUT:
     stringa numerica esadecimale equivalente alla word d'ingresso.

Routines di supporto di secondo livello.

Tali routines eseguono i seguenti compiti:
-Ricerca di un'istruzione all'interno del vettore del DB.
-Disassemblaggio di una singola istruzione.

Sono quindi routines abbastanza complesse, che vengono utilizzate dal loop principale del programma per effettuare il disassemblaggio. La complessità di tali routines fa in modo che il loop principale abbia una struttura più semplice.

I compiti sopra elencati vengono realizzati rispettivamente da:
-RicercaIsr.
-Disassemblatore.

RicercaIsr.
Descrizione: Ricerca, all'interno del vettore del Record, il record associato agli opcodes specificati come argomento della routine. Utilizza il metodo di ricerca specificato nell'apposito paragrafo.
Tipo: Funzione.
INPUT:
     opcode: vettore contenente i tre opcodes necessari per la ricerca.
OUTPUT:
     posizione, all'interno del vettore, del record contenente i dati
     dell'istruzione. Se l'opcode non è trovato la routine restituisce il
     valore zero.
Altre variabili:
     i, c: contatori.
     inizio: indice che rappresenta il limite inferiore della ricerca.
     fine: indice che rappresenta il limite superiore della ricerca.
     meta: indice che rappresenta l'elemento esaminato.
     res: risultato della ricerca.

Disassemblatore.
Descrizione: Primitiva di disassemblaggio che effettua il dissassemblaggio di una singola istruzione LM.
Tipo: Funzione.
INPUT:
     MemInd: Indirizzo di memoria (virtuale) in cui è contenuto
             l'istruzione da disassemblare.
     x: indice dell'elemento, del vettore del DB, in cui sono contenuti i
        dati dell'istruzione da disassemblare.
OUTPUT:
     TRUE:  il disassemblaggio è stato effettuato correttamente.
     FALSE: si sono verificati errori durante l'esecuzione della routine.
            (mancaza di memoria libera sufficiente).
Altre variabili:
     w: word per effettuare il salvataggio temporaneo di MemInd.
     c: contatore.
     ex: stringa utilizzata per la stampa esadecimale dei valori numerici.
     line: stringa contenente l'output del DSM. Rappresenta una linea di
           codice sorgente assembly.
     din: word contenente la parte dinamica dell'istruzione.
     bline: stringa utilizzata fondere la parte statica e la parte
            dinamica.
     lun: lunghezza della stringa bline.
Analisi.
Questa routine esegue il compito di disassemblare un'istruzione Z80.
Per realizzare ciò utilizza i dati prelevati dal DB per quanto riguarda la parte statica, e i dati prelevati dalla memoria virtuale per quanto riguarda la parte dinamica.
Le operazioni di tale routine riguardano principalmente funzioni di elaborazione di stringhe, utilizzate per ottenere il giusto posizionamento dei vari elementi che formano una riga generata dal DSM.
La routine copia in LINE (che conterrà il risultato dell'elaborazione) l'indirizzo di memoria da dove è stata prelevata l'istruzione, seguita dai vari bytes che formano l'istruzione. Tutto espresso in esadecimale.
Successivamente genera la vera e propria istruzione assembly. Per far ciò verifica se nell'istruzione è presente una parte dinamica. In caso negativa ricopia pari pari la parte statica dal record del DB nella variabile LINE. Altrimenti verifica se la parte dinamica è divisa in due operandi. In caso affermativo ricopia nella variabile LINE prima la parte dinamica del secondo operando e poi e quella del primo. Se la parte dinamica rappresenta un solo operando allora si inserisce questo all'intero della stringa. Naturalmente i casi più semplici da gestire sono il primo e l'ultimo.
Alla fine del processo la variabile LINE è stampata su terminale.

LoopDSM
Descrizione: Loop principale del disassemblatore.
Tipo: Funzione.
INPUT:
     IndSorg: Indirizzo da cui partire il disassemblaggio.
     NumStart: Numero di bytes da disassemblare.
OUTPUT:
     numero di linee assembly generate.
Altre variabili:
     buffer: vettore contenente i cinque bytes prelevati dalla memoria
             necessari per il disassemblaggio.
     opc: vettore contenente i tre bytes necessari per contenere il codice
          operativo dell'istruzione. Per istruzione con meno di tre bytes
          di codice operativo sono significativi solo una parte degli
          elementi.
     NumLines: numero di linee decompilate.
     NumBytes: numero di bytes che rimangono da disassemblare.
     err: flag di errore, vale TRUE se la memoria di decompilazione è
          terminata.
     res: risultato della routine RicercaIsr. Contiene l'indice
          dell'elemento nel vettore del DB, che contiene i dati
          dell'istruzione cercata. Vale zero se non è stata trovata
          l'istruzione.
     i: contatore.
     line: stringa utilizzata per generare una linea standard per le
           istruzioni non trovate nel DB.
     MemInd: indirizzo di memoria dell'istruzione attualmente
             disassemblata.
     w: word utilizzata per salvare il valore di MemInd.

Analisi.
Questa routine rappresenta il cuore del disasemblatore.
Avendo in ingresso l'indirizzo di memoria virtuale che si desidera disassemblare ed il numero di bytes di disassemblere, genera le equivalenti linee in linguaggio assembly. Il numero di bytes da disassemblare viene arrotondato in eccesso in modo da generare anche l'ultima linea. Così che se si chiede di disassemblare 10 bytes e le linee ottenute sono composte da istruzioni di 5,3,4 bytes abbiamo che l'ultima riga viene ugualmente visualizzata perché si arrotonda NumBytes a 12.
La routine in se stessa non realizza compiti estremamente complessi, delegando la maggior dei compiti alle routines di supporto di secondo livello. Infatti essa utilizza la routine RicercaIsr per ricercare all'interno del DB il record contenente i dati dell'istruzione attualmente elaborata. Ed utilizza la routine Disassemblatore per realizzare materialmente il disassemblaggio per la creazione della riga da visualizzare.
La struttura di questa routine non è altro che quella di un enorme loop, che viene ripetuto finché non terminano i bytes da disassemblare. In ogni iterazione tale loop carica dalla memoria di compilazione (memoria Virtuale) i cinque bytes necessari per l'elaborazione. Utilizza tre di questi bytes come presunto opcode per la ricerca all'interno del DB. Successivamente in base al record trovato esclude parte di questi tre bytes per utilizzarli come bytes dati, oppure eventualmente utilizza una parte dei rimanenti due bytes prelevati dalla memoria. In ogni modo l'indice all'interno del DB del record dell'istruzione elaborata, insieme agli eventuali bytes di parte dinamica rappresentano un pacchetto d'informazioni che vengono inviate alla routine Disassemblatore per realizzare l'effettiva generazione dell'output. C'è da notare che anche se la suddetta routine realizza la decompilazione, c'è una caso in cui tale operazione viene svolta dal loop principale. E' il caso in cui la routine RicercaIsr ha dato esito negativo. Quindi il primo byte dell'opcode prelevato dalla memoria non è valido, forse perché indica un byte di dato. In questo caso la routine genera automaticamente una riga standard della forma:

IIII n1 ???

che viene generata grazie all'utilizzo della variabile LINE.
Questo caso già è stato analizzato nell'apposito paragrafo.
Fatto ciò il ciclo ricomincia.

                                                                                